@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';

@use '../tokens';

$tokens: meta.module-variables(tokens) !default;

@function kbq-css-variable($name, $value: null) {
    @if $value {
        @return var(--kbq-#{$name}, $value);
    } @else {
        @return var(--kbq-#{$name}, map.get($tokens, $name));
    }
}

@function getToken($name) {
    @return map.get($tokens, $name);
}

@mixin kbq-css-font-variable($component, $component-property, $font-property, $font) {
    #{$font-property}: var(
        --kbq-#{$component}-#{$font}#{$component-property}-#{$font-property},
        map.get($tokens, #{$component}-#{$font}#{$component-property}-#{$font-property})
    );
}

@mixin kbq-typography-css-variables($component, $property) {
    @include kbq-css-font-variable($component, $property, font-size, font-);
    @include kbq-css-font-variable($component, $property, font-weight, font-);
    @include kbq-css-font-variable($component, $property, line-height, font-);
    @include kbq-css-font-variable($component, $property, font-family, font-);
    @include kbq-css-font-variable($component, $property, text-transform, font-);
    @include kbq-css-font-variable($component, $property, font-feature-settings, font-);
    @include kbq-css-font-variable($component, $property, letter-spacing, font-);
}

@mixin kbq-typography-level-to-styles_css-variables($component, $property) {
    @include kbq-css-font-variable($component, $property, font-size, '');
    @include kbq-css-font-variable($component, $property, font-weight, '');
    @include kbq-css-font-variable($component, $property, line-height, '');
    @include kbq-css-font-variable($component, $property, font-family, '');
    @include kbq-css-font-variable($component, $property, text-transform, '');
    @include kbq-css-font-variable($component, $property, font-feature-settings, '');
    @include kbq-css-font-variable($component, $property, letter-spacing, '');
}

@function kbq-sum-css-variables($first, $second) {
    @return calc(kbq-css-variable($first) + kbq-css-variable($second));
}

@function kbq-sum-series-css-variables($variables) {
    $sum: 0;
    @each $variable in $variables {
        @if ($sum == 0) {
            @if type-of($variable) == number {
                $sum: $variable;
            } @else {
                $sum: kbq-css-variable($variable);
            }
        } @else {
            @if type-of($variable) == number {
                $sum: calc($sum + $variable);
            } @else {
                $sum: calc($sum + kbq-css-variable($variable));
            }
        }
    }
    @return $sum;
}

@function kbq-difference-css-variables($first, $second) {
    @return calc(kbq-css-variable($first) - kbq-css-variable($second));
}

@function kbq-css-half-difference($outer, $inner, $border: null) {
    @if $border {
        @return calc((kbq-css-variable($outer) - kbq-css-variable($inner) - $border * 2) / 2);
    } @else {
        @return calc((kbq-css-variable($outer) + kbq-css-variable($inner)) / 2);
    }
}
