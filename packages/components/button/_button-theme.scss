@use 'sass:meta';
@use 'sass:map';

@use '../core/styles/typography/typography-utils' as *;
@use '../core/styles/common/tokens' as *;

@mixin _icon($left-icon, $right-icon) {
    .kbq-icon {
        color: $left-icon;

        &.kbq-icon_left {
            color: $left-icon;
        }

        &.kbq-icon_right {
            color: $right-icon;
        }
    }
}

@mixin kbq-button-type($component, $type, $sub-type) {
    $style: map.get($component, $type, $sub-type);
    $base-path: button-#{$type}-#{$sub-type};

    border-color: kbq-css-variable(#{$base-path}-border, map.get($style, border));
    color: kbq-css-variable(#{$base-path}-foreground, map.get($style, foreground));
    background: kbq-css-variable(#{$base-path}-background, map.get($style, background));

    @include _icon(
        kbq-css-variable(#{$base-path}-left-icon, map.get($style, left-icon)),
        kbq-css-variable(#{$base-path}-right-icon, map.get($style, right-icon))
    );

    &:hover:not(.kbq-disabled),
    &.kbq-hover:not(.kbq-disabled) {
        background: kbq-css-variable(#{$base-path}-states-hover-background, map.get($style, states-hover-background));
    }

    &:active:not(.kbq-disabled),
    &.kbq-active:not(.kbq-disabled) {
        background: kbq-css-variable(#{$base-path}-states-active-background, map.get($style, states-active-background));
    }

    &.kbq-disabled {
        color: kbq-css-variable(#{$base-path}-states-disabled-foreground, map.get($style, states-disabled-foreground));
        background: kbq-css-variable(
            #{$base-path}-states-disabled-background,
            map.get($style, states-disabled-background)
        );

        @include _icon(
            kbq-css-variable(#{$base-path}-states-disabled-left-icon, map.get($style, states-disabled-left-icon)),
            kbq-css-variable(#{$base-path}-states-disabled-right-icon, map.get($style, states-disabled-right-icon))
        );
    }
}

@mixin kbq-button-theme($theme) {
    $button: map.get(map.get($theme, components), button);

    .kbq-button-overlay {
        display: none;
    }

    .kbq-button,
    .kbq-button-icon {
        -webkit-font-smoothing: antialiased;

        &.kbq-button_filled {
            &.kbq-contrast {
                @include kbq-button-type($button, filled, contrast-fade-off);
            }

            &.kbq-contrast-fade {
                @include kbq-button-type($button, filled, contrast-fade-on);
            }
        }

        &.kbq-button_outline {
            &.kbq-theme-fade {
                @include kbq-button-type($button, outline, theme-fade-on);
            }

            &.kbq-contrast-fade {
                @include kbq-button-type($button, outline, contrast-fade-on);
            }
        }

        &.kbq-button_transparent {
            &.kbq-theme {
                @include kbq-button-type($button, transparent, theme);
            }

            &.kbq-contrast {
                @include kbq-button-type($button, transparent, contrast);
            }
        }

        &.kbq-button_filled,
        &.kbq-button_outline,
        &.kbq-button_transparent {
            &.cdk-keyboard-focused {
                $focused-color: map.get($theme, states, focused-color);
                outline: 1px solid $focused-color;
                border-color: $focused-color;
            }
        }
    }
}

@mixin kbq-button-typography($config) {
    .kbq-button,
    .kbq-button-icon {
        @include kbq-typography-css-variables(button, default);
    }

    .kbq-button-icon.kbq-button-wrapper {
        .kbq-icon {
            line-height: kbq-line-height($config, body);
        }
    }
}
