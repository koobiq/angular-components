@use '../core/styles/common/tokens' as *;

@use './link-tokens';

@mixin kbq-link-geometry() {
    display: inline;

    text-decoration: none;
    cursor: pointer;

    outline-offset: var(--kbq-link-size-state-focused-outline-offset);

    &:focus {
        outline: none;
    }

    &.kbq-text-only:not(.kbq-text-with-dot),
    &.kbq-text-with-icon .kbq-link__text,
    &.kbq-text-with-dot .kbq-link__text {
        border-bottom-style: solid;
        border-bottom-width: 1px;
    }

    &.kbq-text-with-icon .kbq-link__text {
        &:not(:first-child) {
            margin-left: var(--kbq-link-size-normal-content-padding);
        }

        &:not(:last-child) {
            margin-right: var(--kbq-link-size-normal-content-padding);
        }
    }

    &.kbq-link_compact {
        &.kbq-text-with-icon .kbq-link__text {
            &:not(:first-child) {
                margin-left: var(--kbq-link-size-compact-content-padding);
            }

            &:not(:last-child) {
                margin-right: var(--kbq-link-size-compact-content-padding);
            }
        }
    }

    &.kbq-link_big {
        &.kbq-text-with-icon .kbq-link__text {
            &:not(:first-child) {
                margin-left: var(--kbq-link-size-big-content-padding);
            }

            &:not(:last-child) {
                margin-right: var(--kbq-link-size-big-content-padding);
            }
        }
    }

    &.kbq-link_no-underline,
    &.kbq-link_pseudo {
        &.kbq-text-only,
        &.kbq-text-with-icon .kbq-link__text,
        &.kbq-text-with-dot .kbq-link__text {
            border-bottom-color: transparent;
        }
    }
}

@mixin kbq-link-state($state-name: null) {
    $base-path: link;

    @if $state-name {
        $base-path: link-#{$state-name};
    }

    color: var(--kbq-#{$base-path}-text);

    &.kbq-text-only,
    &.kbq-text-with-icon .kbq-link__text,
    &.kbq-text-with-dot .kbq-link__text {
        border-bottom-color: var(--kbq-#{$base-path}-border-bottom);
    }

    & .kbq-icon {
        color: var(--kbq-#{$base-path}-text) !important;
    }
}

@mixin kbq-link-theme() {
    .kbq-link {
        @include kbq-link-geometry();

        @include kbq-link-state();

        transition: color ease-out 300ms;

        &:hover {
            transition: color 0ms;

            @include kbq-link-state(state-hover);
        }

        &:active,
        &.kbq-active {
            @include kbq-link-state(state-active);
        }

        &.kbq-link_use-visited:not(.kbq-disabled):visited {
            @include kbq-link-state(state-visited);

            &:hover {
                @include kbq-link-state(state-visited-hover);
            }

            &:active,
            &.kbq-active {
                @include kbq-link-state(state-visited-active);
            }
        }

        &.cdk-keyboard-focused {
            outline: var(--kbq-link-state-focused-outline) solid;
        }

        &.kbq-disabled {
            cursor: default;
            pointer-events: none;

            @include kbq-link-state(state-disabled);
        }

        @media print {
            .kbq-link_print:not(.kbq-disabled) {
                &.kbq-text-only,
                &.kbq-text-with-icon .kbq-link__text,
                &.kbq-text-with-dot .kbq-link__text {
                    border-bottom: none;
                }

                &::after {
                    content: ':\a' attr(print);
                    white-space: pre;
                }
            }
        }
    }
}

@mixin kbq-link-typography() {
    .kbq-link {
        @include kbq-typography-level-to-styles-css-variables(typography, text-normal);

        & .kbq-icon {
            line-height: inherit;
            vertical-align: baseline;
        }
    }

    .kbq-link.kbq-link_compact {
        @include kbq-typography-level-to-styles-css-variables(typography, text-compact);
    }

    .kbq-link.kbq-link_big {
        @include kbq-typography-level-to-styles-css-variables(typography, text-big);
    }
}
