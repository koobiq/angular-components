@use 'sass:meta';
@use 'sass:map';

@use '../core/styles/typography/typography-utils' as *;

@use '../core/styles/common/tokens' as *;

@mixin kbq-button-toggle-state($state-name) {
    background: var(--kbq-button-toggle-item-#{$state-name}-background);

    color: var(--kbq-button-toggle-item-#{$state-name}-text);

    & .kbq-icon {
        color: var(--kbq-button-toggle-item-#{$state-name}-icon);
    }
}

@mixin kbq-button-toggle-theme() {
    .kbq-button-toggle-group {
        background: var(--kbq-button-toggle-container-background);

        .kbq-button-toggle {
            & > .kbq-button,
            & > .kbq-icon-button {
                @include kbq-button-toggle-state(default);

                &:hover:not(.kbq-disabled) {
                    @include kbq-button-toggle-state(states-hover);
                }

                &:active:not(.kbq-disabled) {
                    @include kbq-button-toggle-state(states-active);
                }

                &.kbq-selected:not(.kbq-disabled) {
                    @include kbq-button-toggle-state(states-selected);

                    &:hover {
                        @include kbq-button-toggle-state(states-selected-hover);
                    }

                    &:active {
                        @include kbq-button-toggle-state(states-selected-active);
                    }
                }

                &.kbq-disabled {
                    @include kbq-button-toggle-state(states-disabled);
                }

                &.kbq-disabled.kbq-selected {
                    @include kbq-button-toggle-state(states-selected-disabled);
                }

                &.cdk-keyboard-focused {
                    border-color: var(--kbq-button-toggle-item-states-focused-outline);
                }
            }
        }
    }
}

@mixin kbq-button-toggle-typography() {
    .kbq-button-toggle .kbq-button-toggle-wrapper {
        @include kbq-typography-level-to-styles_css-variables(typography, text-normal-medium);
    }
}
