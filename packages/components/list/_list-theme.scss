@use 'sass:meta';
@use 'sass:map';

@use '../core/styles/typography/typography-utils' as *;
@use '../core/styles/common/tokens' as *;

@mixin kbq-list-item($component, $state-name) {
    $state: map.get($component, $state-name);

    background: kbq-css-variable(list-#{$state-name}-container-background, map.get($state, container-background));

    .kbq-list-text {
        color: kbq-css-variable(list-#{$state-name}-text, map.get($state, text));
    }

    .kbq-icon {
        color: kbq-css-variable(list-#{$state-name}-icon, map.get($state, icon));
    }

    .kbq-option-action .kbq-icon {
        color: kbq-css-variable(list-#{$state-name}-icon-button, map.get($state, icon-button));
    }

    .kbq-list-option-caption {
        color: kbq-css-variable(list-#{$state-name}-caption, map.get($state, caption));
    }
}

@mixin kbq-list-theme($theme) {
    $list-item: map.get($theme, components, list-item);

    .kbq-list-option {
        @include kbq-list-item($list-item, default);

        &:hover:not(.kbq-disabled) {
            @include kbq-list-item($list-item, states-hover);
        }

        &.kbq-focused {
            border-color: map.get($list-item, states-focused, focus-outline);
        }

        &.kbq-selected {
            @include kbq-list-item($list-item, states-selected);

            &:hover:not(.kbq-disabled) {
                @include kbq-list-item($list-item, states-selected-hover);
            }
        }

        &.kbq-disabled {
            @include kbq-list-item($list-item, states-disabled);
        }
    }
}

@mixin kbq-list-typography($config) {
    .kbq-list-item,
    .kbq-list-option {
        @include kbq-typography-css-variables(list, text);

        .kbq-list-text {
            .kbq-list-option-caption {
                @include kbq-typography-css-variables(list, caption);
            }
        }
    }
}
