@use 'sass:meta';
@use 'sass:map';

@use '../core/styles/theming/theming' as *;
@use '../core/styles/typography/typography-utils' as *;
@use '../core/styles/common/tokens' as *;


@mixin kbq-toggle-state($component, $type, $state-name) {
    $state: map.get($component, $type, $state-name);
    $base: toggle-#{$type}-#{$state-name};

    .kbq-toggle-bar {
        border-color: kbq-css-variable(#{$base}-border, map.get($state, border));
        background: kbq-css-variable(#{$base}-background, map.get($state, background));
    }

    .kbq-toggle__circle {
        background: kbq-css-variable(#{$base}-circle-background, map.get($state, circle-background));
    }
}

@mixin kbq-toggle-color($component, $type) {
    @include kbq-toggle-state($component, $type, default);

    &:hover {
        @include kbq-toggle-state($component, $type, states-hover);
    }

    &.kbq-active {
        @include kbq-toggle-state($component, $type, states-checked);
    }

    &.kbq-active:hover {
        @include kbq-toggle-state($component, $type, states-checked-hover);
    }

    &.cdk-keyboard-focused {
        @include kbq-toggle-state($component, $type, states-focused);

        & .kbq-toggle-bar {
            border-color: kbq-css-variable(
                toggle-#{$type}-states-focused-focus-outline,
                map.get($component, $type, states-focused, focus-outline)
            );
            box-shadow: 0 0 0 1px kbq-css-variable(
                toggle-#{$type}-states-focused-focus-outline,
                map.get($component, $type, states-focused, focus-outline)
            );
        }
    }

    &.kbq-active.cdk-keyboard-focused {
        @include kbq-toggle-state($component, $type, states-checked-focused);

        & .kbq-toggle-bar {
            border-color: kbq-css-variable(
                toggle-#{$type}-states-checked-focused-focus-outline,
                map.get($component, $type, states-checked-focused, focus-outline)
            );
            box-shadow: 0 0 0 1px kbq-css-variable(
                toggle-#{$type}-states-checked-focused-focus-outline,
                map.get($component, $type, states-checked-focused, focus-outline)
            );
        }
    }

    &.kbq-disabled,
    &.kbq-active.kbq-disabled {
        @include kbq-toggle-state($component, $type, states-disabled);
    }
}

@mixin kbq-toggle-theme($theme) {
    $toggle: map.get($theme, components, toggle);

    .kbq-toggle {
        color: kbq-css-variable(foreground-contrast, map.get($theme, foreground, contrast));

        @include kbq-toggle-color($toggle, theme);

        &.kbq-error {
            @include kbq-toggle-color($toggle, error);
        }
    }
}

@mixin kbq-toggle-typography($config) {
    .kbq-toggle:not(.kbq-toggle_big) {
        @include kbq-typography-css-variables(toggle, normal-label);

        & .kbq-hint {
            @include kbq-typography-css-variables(toggle, normal-caption);
        }

        & .kbq-toggle-bar-container {
            @include kbq-css-font-variable(toggle, normal-caption, line-height, font-);
        }
    }

    .kbq-toggle.kbq-toggle_big {
        @include kbq-typography-css-variables(toggle, big-label);

        & .kbq-hint {
            @include kbq-typography-css-variables(toggle, big-caption);
        }

        & .kbq-toggle-bar-container {
            @include kbq-css-font-variable(toggle, big-label, line-height, font-);
        }
    }
}
